using Microsoft.AspNetCore.Mvc;
using UserService.Application.Interfaces;
using UserService.Application.Models;
using System.Threading.Tasks;
using System;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using UserService.Application.CustomExceptions;
using System.IdentityModel.Tokens.Jwt;

namespace UserService.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;

        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }

        [HttpGet("/api/healthz")] // <-- Change: Explicitly set the absolute path
        public IActionResult HealthCheck() => Ok("Healthy");

        // GET: api/Auth
        [Authorize(Roles = "Admin")]
        [HttpGet]
        public async Task<IActionResult> GetAllUser([FromQuery] int pageNo, [FromQuery] int pageSize)
        {
            var list = await _authService.GetAllAsync(pageNo, pageSize);
            return Ok(list);
        }


        // GET: api/Auth/{id}
        [Authorize(Roles = "Admin")]
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUserById(Guid id)
        {
            var user = await _authService.GetByIdAsync(id);
            if (user == null) return NotFound();
            return Ok(user);
        }

        [Authorize(Roles = "Admin")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(Guid id)
        {
            // Ki·ªÉm tra r√†ng bu·ªôc 1: Ng∆∞·ªùi d√πng KH√îNG ƒë∆∞·ª£c t·ª± x√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh (n·∫øu d√πng chung endpoint)
            // L·∫•y userId t·ª´ token c·ªßa ng∆∞·ªùi ƒëang y√™u c·∫ßu
            var currentUserIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (!string.IsNullOrEmpty(currentUserIdClaim) && Guid.TryParse(currentUserIdClaim, out var currentUserId) && currentUserId == id)
            {
                // Tr·∫£ v·ªÅ 403 Forbidden ho·∫∑c 400 BadRequest ƒë·ªÉ c·∫•m ng∆∞·ªùi d√πng t·ª± x√≥a m√¨nh
                return StatusCode(403, new { message = "Admin kh√¥ng ƒë∆∞·ª£c t·ª± x√≥a t√†i kho·∫£n c·ªßa ch√≠nh m√¨nh th√¥ng qua API n√†y." });

            }

            try
            {
                // X·ª≠ l√Ω logic x√≥a (bao g·ªìm c·∫£ r√†ng bu·ªôc, ki·ªÉm tra quy·ªÅn v√† NotFound) s·∫Ω n·∫±m trong service.
                var message = await _authService.DeleteUserAsync(id);

                // N·∫øu service tr·∫£ v·ªÅ th√†nh c√¥ng
                return Ok(new { message = message ?? $"Ng∆∞·ªùi d√πng v·ªõi ID '{id}' ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng." });
            }
            catch (Application.CustomExceptions.NotFoundException ex)
            {
                // B·∫Øt l·ªói khi kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
                return NotFound(new { message = ex.Message });
            }
            catch (InvalidOperationException ex)
            {
                // B·∫Øt l·ªói v·ªÅ r√†ng bu·ªôc: V√≠ d·ª•: "Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng v√¨ c√≥ ƒë∆°n h√†ng/b√†i ƒëƒÉng li√™n quan."
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                // B·∫Øt l·ªói server chung (500)
                return StatusCode(500, new { message = "L·ªói h·ªá th·ªëng khi x√≥a ng∆∞·ªùi d√πng: " + ex.Message });
            }
        }

        // POST: api/Auth/register
        // B∆∞·ªõc 2: ƒêƒÉng k√Ω ƒë·∫ßy ƒë·ªß, k√®m OTP. Ki·ªÉm tra OTP, l∆∞u user, k√≠ch ho·∫°t t√†i kho·∫£n, v√¥ hi·ªáu h√≥a OTP.
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterRequest request)
        {
            try
            {
                var response = await _authService.Register(request);
                return Ok(new { message = "Register success. Your account has been active. Please login", response });
            }
            catch (Exception ex)
            {
                // N√™n s·ª≠ d·ª•ng Custom Exception v√† HttpStatus code ph√π h·ª£p h∆°n
                return BadRequest(new { message = ex.Message });
            }
        }

        [Authorize(Roles = "Buyer")]
        [HttpPost("active-seller")]
        public async Task<IActionResult> ActiveSellerAccount()
        {
            // L·∫•y userId t·ª´ token
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized(new { message = "User is not authenticated." });
            }

            try
            {
                var (success, message) = await _authService.ActiveSellerAccount(userId);
                if (!success)
                    return BadRequest(new { message });

                return Ok(new { message });
            }
            catch (Exception ex)
            {
                // N·∫øu mu·ªën log, inject ILogger<AuthController> v√† g·ªçi logger ·ªü constructor
                return StatusCode(500, new { message = "Internal server error: " + ex.Message });
            }
        }

        // POST: api/Auth/check-email
        // B∆∞·ªõc 1: Nh·∫≠n email, ki·ªÉm tra c√∫ ph√°p (b·ªüi [EmailAddress]), ki·ªÉm tra tr√πng l·∫∑p DB, t·∫°o OTP
        [HttpPost("check-email")]
        public async Task<IActionResult> CheckEmailForRegistration([FromBody] CheckEmailRequest request)
        {
            // üö® KH√îNG C·∫¶N Th√™m ModelState.IsValid n·∫øu d√πng [ApiController]
            // V√¨ [ApiController] t·ª± ƒë·ªông ki·ªÉm tra c√∫ ph√°p v√† tr·∫£ v·ªÅ 400 n·∫øu Validation th·∫•t b·∫°i.

            try
            {
                var response = await _authService.CheckEmailForRegistration(request.Email);
                return Ok(new { message = "OTP generated successfully. Please check the server log for the code.", response });
            }
            catch (Exception ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginRequest request)
        {
            try
            {
                var response = await _authService.Login(request);
                return Ok(response);
            }
            catch (AccountNotActiveException ex)
            {
                // C√≥ th·ªÉ tr·∫£ 403 Forbidden ho·∫∑c 200 OK v·ªõi c·ªù frontend
                return BadRequest(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception)
            {
                return StatusCode(500, new { message = "Something went wrong." });
            }
        }


        // PUT: api/Auth/update-user-info
        [Authorize]
        [HttpPut("update-user-info")]
        public async Task<IActionResult> UpdateUserNameAndPhoneNumber([FromBody] UpdateUserRequest request)
        {


            // L·∫•y userId t·ª´ token
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized(new { message = "User is not authenticated." });
            }

            try
            {
                var message = await _authService.UpdateUserNameAndPhoneNumberAsync(request, userId);
                return Ok(new { message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        // PUT: api/Auth/update-user-password
        [Authorize]
        [HttpPut("update-user-password")]
        public async Task<IActionResult> UpdateUserPassword([FromBody] UpdateUserPasswordRequest request)
        {

            // L·∫•y userId t·ª´ token
            var userIdClaim = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
            {
                return Unauthorized(new { message = "User is not authenticated." });
            }

            try
            {
                var message = await _authService.UpdateUserPasswordAsync(request, userId);
                return Ok(new { message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (Exception ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        // POST: api/Auth/forget-password
        [HttpPost("forget-password")]
        public async Task<IActionResult> ForgetPassword([FromQuery] string email)
        {
            if (string.IsNullOrWhiteSpace(email))
            {
                return BadRequest(new { message = "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
            }

            try
            {
                // 1. G·ªçi Service v√† nh·∫≠n v·ªÅ OTP
                var otp = await _authService.ForgetPassword(email); // G·ªçi ph∆∞∆°ng th·ª©c ƒë√£ ch·ªânh s·ª≠a

                // 2. Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng v√† OTP cho frontend
                // Frontend s·∫Ω d√πng message ƒë·ªÉ bi·∫øt th√†nh c√¥ng v√† d√πng OTP ƒë·ªÉ hi·ªÉn th·ªã ho·∫∑c log (n·∫øu c·∫ßn thi·∫øt cho vi·ªác debug)
                return Ok(new
                {
                    message = "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω. Chuy·ªÉn sang m√†n h√¨nh nh·∫≠p OTP v√† m·∫≠t kh·∫©u m·ªõi.",
                    otpCode = otp,
                    success = true // Th√™m field success ƒë·ªÉ frontend d·ªÖ ki·ªÉm tra
                });
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω"))
            {
                // 3. B·∫Øt l·ªói khi email ch∆∞a ƒëƒÉng k√Ω
                return NotFound(new
                {
                    message = ex.Message, // "Email ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng."
                    success = false
                });
            }
            catch (Exception ex)
            {
                // 4. B·∫Øt c√°c l·ªói kh√°c (l·ªói server, l·ªói t·∫°o OTP...)
                return StatusCode(500, new
                {
                    message = "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng khi t·∫°o OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    details = ex.Message,
                    success = false
                });
            }
        }

        // POST: api/Auth/reset-password
        [HttpPost("reset-password")]
        public async Task<IActionResult> ResetPassword([FromBody] ResetRequest request)
        {
            // ... (Code ki·ªÉm tra input v√† g·ªçi service ResetPassword kh√¥ng ƒë·ªïi) ...
            if (string.IsNullOrEmpty(request.Email) || string.IsNullOrEmpty(request.Otp) || string.IsNullOrEmpty(request.Password))
            {
                return BadRequest(new { message = "Email, OTP v√† M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
            }

            try
            {
                await _authService.ResetPassword(request.Email, request.Otp, request.Password, request.Repassword);
                return Ok(new { message = "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng." });
            }
            catch (Exception ex)
            {
                // B·∫Øt l·ªói nh∆∞ OTP kh√¥ng h·ª£p l·ªá, email kh√¥ng t·ªìn t·∫°i, m·∫≠t kh·∫©u kh√¥ng kh·ªõp, ...
                return BadRequest(new { message = ex.Message });
            }
        }

        // POST: api/Auth/google-login
        [HttpPost("google-login")]
        public async Task<IActionResult> GoogleLogin([FromBody] GoogleLoginRequest request)
        {
            try
            {
                var response = await _authService.GoogleLogin(request);
                return Ok(response);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = "Google Login failed: " + ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Internal server error: " + ex.Message });
            }
        }

        // POST: api/Auth/refresh-token
        [HttpPost("refresh-token")]
        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest request)
        {
            try
            {
                // // Th√™m ki·ªÉm tra Header
                // if (!Request.Headers.ContainsKey("Authorization") ||
                //     !Request.Headers["Authorization"].ToString().StartsWith("Bearer "))
                // {
                //     // Tr·∫£ v·ªÅ 400 n·∫øu Access Token c≈© kh√¥ng ƒë∆∞·ª£c g·ª≠i l√™n
                //     return BadRequest(new { message = "Access Token (Authorization header) is required for refreshing." });
                // }

                var oldAccessToken = Request.Headers["Authorization"].ToString().Replace("Bearer ", "");
                var authResponse = await _authService.RefreshTokenAsync(request, oldAccessToken);
                return Ok(authResponse);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = "Refresh token is invalid or expired. Please login again." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Internal server error: " + ex.Message });
            }
        }

        // POST: api/Auth/logout
        [Authorize]
        [HttpPost("logout")]
        public async Task<IActionResult> Logout()
        {

            // L·∫•y userId t·ª´ token
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // L·∫•y jti t·ª´ token
            var jtiClaim = User.FindFirst(JwtRegisteredClaimNames.Jti)?.Value; // C·∫ßn d√πng System.IdentityModel.Tokens.Jwt;

            // N·∫øu kh√¥ng t√¨m th·∫•y userId trong token, tr·∫£ v·ªÅ l·ªói
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                return Unauthorized(new { message = "User is not authenticated." });

            // Ki·ªÉm tra n·∫øu jti ho·∫∑c userId b·ªã thi·∫øu
            if (string.IsNullOrEmpty(jtiClaim)) // Ki·ªÉm tra JTI c√≥ t·ªìn t·∫°i kh√¥ng
            {
                return BadRequest(new { message = "JTI claim is missing from access token." });
            }

            try
            {
                await _authService.LogoutAsync(userId, jtiClaim);
                return Ok(new { message = "Logout successful." });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "Internal server error: " + ex.Message });
            }
        }
    }
}